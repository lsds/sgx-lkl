trigger:
  branches:
    include:
    - 'oe_port'
  paths:
    exclude:
    - 'README.md'
    - 'docs/'

pr:
  branches:
    include:
    - '*'  # must quote since "*" is a YAML reserved character; we want a string
  paths:
    exclude:
    - 'README.md'
    - 'docs/'

variables:
  - name: SGXLKL_ROOT
    value: $(Build.SourcesDirectory)
  # For some reason $USER is undefined in the scale set agents (Ubuntu stock image)
  - name: USER
    value: root

pool:
  name: "scaleset-sgx"

jobs:  
- job: Build_and_Test
  displayName: Build and Test
  strategy:
    matrix:
      debug:
        build_mode: 'debug'
        test_suite: 'non-ltp'
      nondebug:
        build_mode: 'nondebug'
        test_suite: 'non-ltp'
      debug_ltp1:
        build_mode: 'debug'
        test_suite: 'ltp1'
      debug_ltp2:
        build_mode: 'debug'
        test_suite: 'ltp2'

  steps:
    - checkout: self
      submodules: false
      clean: true

    - bash: .azure-pipelines/scripts/checkout_submodules.sh
      displayName: Checkout Submodules
  
    - bash: .azure-pipelines/scripts/install_prerequisites.sh
      displayName: Install pre-requisites
    
    - bash: .azure-pipelines/scripts/dump_system_info.sh
      displayName: Dump system info

    - bash: .azure-pipelines/scripts/install_openenclave.sh
      displayName: Install Open Enclave

    - bash: .azure-pipelines/scripts/build.sh
      displayName: Compile and Build
      env:
        build_mode: "$(build_mode)"

    - bash: .azure-pipelines/scripts/test_runner.sh $(test_suite)
      displayName: Run Tests
      env:
        build_mode: "$(build_mode)"

    - task: PublishTestResults@2
      displayName: "Publish Test Results *.xml"
      condition: always()
      inputs:
        testResultsFormat: "JUnit"
        testResultsFiles: "report/*-junit.xml"
        testRunTitle: "$(test_suite) ($(build_mode))"
        mergeTestResults: true
        failTaskOnFailedTests: true

    - task: PublishBuildArtifacts@1
      displayName: "Archive Logs"
      condition: always()
      inputs:
        pathtoPublish: "report"
        artifactName: logs

    - task: PublishBuildArtifacts@1
      displayName: "Publish Build Artifacts"
      # If you want to publish the 'build' directory after successful make,
      # Then start the build with variable -
      # Name = create_drop
      # Value = true
      condition: and(succeeded(), eq(variables['create_drop'], 'true'))
      inputs:
        pathtoPublish: "build"
        artifactName: drop
