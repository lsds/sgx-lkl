trigger:
  branches:
    include:
    - 'oe_port'
  paths:
    exclude:
    - 'README.md'
    - 'docs/'

pr:
  branches:
    include:
    - '*'  # must quote since "*" is a YAML reserved character; we want a string
  paths:
    exclude:
    - 'README.md'
    - 'docs/'

variables:
  - name: SGXLKL_ROOT
    value: $(Build.SourcesDirectory)
  # For some reason $USER is undefined in the scale set agents (Ubuntu stock image)
  - name: USER
    value: root

pool:
  name: "scaleset-sgx"

jobs:  
- job: Build
  displayName: Build
  strategy:
    matrix:
      debug:
        is_debug: 'true'
        use_docker: 'false'
        run_ltp1: 'false'
        run_ltp2: 'false'
      nondebug:
        is_debug: 'false'
        use_docker: 'false'
        run_ltp1: 'false'
        run_ltp2: 'false'
      debug_docker:
        is_debug: 'true'
        use_docker: 'true'
        run_ltp1: 'false'
        run_ltp2: 'false'
      debug_ltp1:
        is_debug: 'true'
        use_docker: 'false'
        run_ltp1: 'true'
        run_ltp2: 'false'
      debug_ltp2:
        is_debug: 'true'
        use_docker: 'false'
        run_ltp1: 'false'
        run_ltp2: 'true'

  steps:
    - checkout: self
      submodules: false
      clean: true

    - task: Bash@3
      displayName: "Checkout Submodules"
      inputs:
        targetType: "FilePath"
        filePath: ".azure-pipelines/scripts/checkout_submodules.sh"
  
    - task: Bash@3
      displayName: "Install pre-requisites"
      inputs:
        targetType: "FilePath"
        filePath: ".azure-pipelines/scripts/install_prerequisites.sh"
    
    - task: Bash@3
      displayName: "Install Openenclave"
      inputs:
        targetType: "FilePath"
        filePath: ".azure-pipelines/scripts/install_openenclave.sh"

    - task: Bash@3
      displayName: Compile and Build
      condition: and(succeeded(), eq(variables['use_docker'], 'false'))
      inputs:
        targetType: "FilePath"
        filePath: ".azure-pipelines/scripts/build.sh"
      env:
        is_debug: "$(is_debug)"

    - task: Bash@3
      displayName: Compile and Build via Docker
      condition: and(succeeded(), eq(variables['use_docker'], 'true'))
      inputs:
        targetType: "FilePath"
        filePath: ".azure-pipelines/scripts/build_docker.sh"
      env:
        is_debug: "$(is_debug)"

    - task: Bash@3
      displayName: "Execute non-LTP Tests"
      condition: and(succeeded(), eq(variables['use_docker'], 'false'), eq(variables['run_ltp1'], 'false'), eq(variables['run_ltp2'], 'false'))
      inputs:
        targetType: "FilePath"
        filePath: ".azure-pipelines/scripts/test_runner.sh"
      env:
        is_debug: "$(is_debug)"

    - task: Bash@3
      displayName: "Execute LTP tests - batch 1"
      condition: and(succeeded(), eq(variables['run_ltp1'], 'true'))
      inputs:
        targetType: "FilePath"
        filePath: ".azure-pipelines/scripts/test_runner.sh"
        arguments: "ltp1"
      env:
        is_debug: "$(is_debug)"

    - task: Bash@3
      displayName: "Execute LTP tests - batch 2"
      condition: and(succeeded(), eq(variables['run_ltp2'], 'true'))
      inputs:
        targetType: "FilePath"
        filePath: ".azure-pipelines/scripts/test_runner.sh"
        arguments: "ltp2"
      env:
        is_debug: "$(is_debug)"

    - task: PublishTestResults@2
      displayName: "Publish Test Results *.xml"
      condition: always()
      inputs:
        testResultsFormat: "JUnit"
        testResultsFiles: "report/*-junit.xml"
        mergeTestResults: true
        failTaskOnFailedTests: true

    - task: PublishBuildArtifacts@1
      displayName: "Archive Logs"
      condition: always()
      inputs:
        pathtoPublish: "report"
        artifactName: logs

    - task: PublishBuildArtifacts@1
      displayName: "Publish Build Artifacts"
      # If you want to publish the 'build' directory after successful make,
      # Then start the build with variable -
      # Name = create_drop
      # Value = true
      condition: and(succeeded(), eq(variables['create_drop'], 'true'))
      inputs:
        pathtoPublish: "build"
        artifactName: drop
