The original test case creates a child process to test
Sendfile system call. But, sgx-lkl environment supports a single process.
Hence, the test case is modified to use pthread instead of a child
process.

diff --git a/testcases/kernel/syscalls/sendfile/sendfile02.c b/testcases/kernel/syscalls/sendfile/sendfile02.c
index e5f115146..acdac130b 100644
--- a/testcases/kernel/syscalls/sendfile/sendfile02.c
+++ b/testcases/kernel/syscalls/sendfile/sendfile02.c
@@ -56,8 +56,10 @@
 #include <arpa/inet.h>
 #include <unistd.h>
 #include <inttypes.h>
+#include <pthread.h>
 #include "test.h"
 #include "safe_macros.h"
+#include "tst_safe_pthread.h"
 
 #ifndef OFF_T
 #define OFF_T off_t
@@ -68,15 +70,15 @@ int TST_TOTAL = 4;
 
 char in_file[100];
 char out_file[100];
-int out_fd;
-pid_t child_pid;
-static int sockfd, s;
+int out_fd = -1;
+static int sockfd = -1;
 static struct sockaddr_in sin1;	/* shared between do_child and create_server */
+pthread_t ptid = NULL;
 
 void cleanup(void);
-void do_child(void);
+void* do_child(void* parm);
 void setup(void);
-int create_server(void);
+void create_server(void);
 
 struct test_case_t {
 	char *desc;
@@ -91,19 +93,32 @@ struct test_case_t {
 	"Test sendfile(2) with offset in the middle of file", 6, 20, 26}
 };
 
-#ifdef UCLINUX
-static char *argv0;
-#endif
+void close_server(void)
+{
+	if (ptid != NULL) {
+		SAFE_PTHREAD_JOIN(ptid, NULL);
+		ptid = NULL;
+	}
+
+	if (sockfd >= 0) {
+		close(sockfd);
+		sockfd = -1;
+	}
+
+	if (out_fd >= 0) {
+		close(out_fd);
+		out_fd = -1;
+	}
+
+}
 
 void do_sendfile(OFF_T offset, int i)
 {
 	int in_fd;
 	struct stat sb;
-	int wait_status;
-	int wait_stat;
 	off_t before_pos, after_pos;
 
-	out_fd = create_server();
+	create_server();
 
 	if ((in_fd = open(in_file, O_RDONLY)) < 0) {
 		tst_brkm(TBROK, cleanup, "open failed: %d", errno);
@@ -124,13 +139,12 @@ void do_sendfile(OFF_T offset, int i)
 
 	/* Close the sockets */
 	shutdown(sockfd, SHUT_RDWR);
-	shutdown(s, SHUT_RDWR);
+	shutdown(out_fd, SHUT_RDWR);
 	if (TEST_RETURN != testcases[i].exp_retval) {
 		tst_resm(TFAIL, "sendfile(2) failed to return "
 			 "expected value, expected: %d, "
 			 "got: %ld", testcases[i].exp_retval,
 			 TEST_RETURN);
-		kill(child_pid, SIGKILL);
 	} else if (offset != testcases[i].exp_updated_offset) {
 		tst_resm(TFAIL, "sendfile(2) failed to update "
 			 "OFFSET parameter to expected value, "
@@ -145,27 +159,25 @@ void do_sendfile(OFF_T offset, int i)
 	} else {
 		tst_resm(TPASS, "functionality of sendfile() is "
 			 "correct");
-		wait_status = waitpid(-1, &wait_stat, 0);
 	}
 
+	close_server();
 	close(in_fd);
 }
 
 /*
  * do_child
  */
-void do_child(void)
+void* do_child(void* parm LTP_ATTRIBUTE_UNUSED)
 {
-	int lc;
 	socklen_t length;
 	char rbuf[4096];
 
-	for (lc = 0; TEST_LOOPING(lc); lc++) {
-		length = sizeof(sin1);
-		recvfrom(sockfd, rbuf, 4096, 0, (struct sockaddr *)&sin1,
-			 &length);
-	}
-	exit(0);
+	length = sizeof(sin1);
+	recvfrom(sockfd, rbuf, 4096, 0, (struct sockaddr *)&sin1,
+		 &length);
+
+	pthread_exit(0);
 }
 
 /*
@@ -201,14 +213,15 @@ void setup(void)
  */
 void cleanup(void)
 {
-
-	close(out_fd);
+	if(sockfd >= 0)
+		shutdown(sockfd, SHUT_RDWR);
+	close_server();
 	/* delete the test directory created in setup() */
 	tst_rmdir();
 
 }
 
-int create_server(void)
+void create_server(void)
 {
 	static int count = 0;
 	socklen_t slen = sizeof(sin1);
@@ -217,7 +230,6 @@ int create_server(void)
 	if (sockfd < 0) {
 		tst_brkm(TBROK, cleanup, "call to socket() failed: %s",
 			 strerror(errno));
-		return -1;
 	}
 	sin1.sin_family = AF_INET;
 	sin1.sin_port = 0; /* pick random free port */
@@ -226,37 +238,18 @@ int create_server(void)
 	if (bind(sockfd, (struct sockaddr *)&sin1, sizeof(sin1)) < 0) {
 		tst_brkm(TBROK, cleanup, "call to bind() failed: %s",
 			 strerror(errno));
-		return -1;
 	}
 	SAFE_GETSOCKNAME(cleanup, sockfd, (struct sockaddr *)&sin1, &slen);
 
-	child_pid = FORK_OR_VFORK();
-	if (child_pid < 0) {
-		tst_brkm(TBROK, cleanup, "client/server fork failed: %s",
-			 strerror(errno));
-		return -1;
-	}
-	if (!child_pid) {	/* child */
-#ifdef UCLINUX
-		if (self_exec(argv0, "") < 0) {
-			tst_brkm(TBROK, cleanup, "self_exec failed");
-			return -1;
-
-		}
-#else
-		do_child();
-#endif
-	}
+	SAFE_PTHREAD_CREATE(&ptid, NULL, do_child, NULL);
 
-	s = socket(PF_INET, SOCK_DGRAM, 0);
+	out_fd = socket(PF_INET, SOCK_DGRAM, 0);
 	inet_aton("127.0.0.1", &sin1.sin_addr);
-	if (s < 0) {
+	if (out_fd < 0) {
 		tst_brkm(TBROK, cleanup, "call to socket() failed: %s",
 			 strerror(errno));
-		return -1;
 	}
-	SAFE_CONNECT(cleanup, s, (struct sockaddr *)&sin1, sizeof(sin1));
-	return s;
+	SAFE_CONNECT(cleanup, out_fd, (struct sockaddr *)&sin1, sizeof(sin1));
 
 }
 
@@ -266,10 +259,6 @@ int main(int ac, char **av)
 	int lc;
 
 	tst_parse_opts(ac, av, NULL, NULL);
-#ifdef UCLINUX
-	argv0 = av[0];
-	maybe_run_child(&do_child, "");
-#endif
 
 	setup();
 
