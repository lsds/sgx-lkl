diff --git a/testcases/kernel/syscalls/getxattr/getxattr01.c b/testcases/kernel/syscalls/getxattr/getxattr01.c
index 54ca65390..3af8d1fb3 100644
--- a/testcases/kernel/syscalls/getxattr/getxattr01.c
+++ b/testcases/kernel/syscalls/getxattr/getxattr01.c
@@ -35,6 +35,10 @@
  * 4. Verify the attribute got by getxattr(2) is same as the value we set
  */
 
+/* Currently xattr is not enabled while mounting root file system. Patch is
+ * mount root file system with xattr enabled and then use  it for the test.
+ */
+
 #include "config.h"
 #include <sys/types.h>
 #include <sys/stat.h>
@@ -57,7 +61,13 @@ char *TCID = "getxattr01";
 #define XATTR_TEST_VALUE "this is a test value"
 #define XATTR_TEST_VALUE_SIZE 20
 #define BUFFSIZE 64
+#define DIR_MODE        (S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH)
+#define FILE_MODE       (S_IRWXU | S_IRWXG | S_IRWXO | S_ISUID | S_ISGID)
+#define MNTPOINT        "mntpoint"
+
 
+static const char *device = "/dev/vda";
+static const char *fs_type = "ext4";
 static void setup(void);
 static void cleanup(void);
 
@@ -147,11 +157,14 @@ static void setup(void)
 	tst_require_root();
 
 	tst_tmpdir();
+	rmdir(MNTPOINT);
+	SAFE_MKDIR(cleanup, MNTPOINT, DIR_MODE);
+	SAFE_MOUNT(cleanup, device, MNTPOINT, fs_type, 0, "user_xattr");
 
 	/* Create test file and setup initial xattr */
-	snprintf(filename, BUFSIZ, "getxattr01testfile");
+	snprintf(filename, BUFSIZ, "mntpoint/getxattr01testfile");
 	fd = SAFE_CREAT(cleanup, filename, 0644);
-	close(fd);
+	SAFE_CLOSE(cleanup,fd);
 	if (setxattr(filename, XATTR_TEST_KEY, XATTR_TEST_VALUE,
 		     strlen(XATTR_TEST_VALUE), XATTR_CREATE) == -1) {
 		if (errno == ENOTSUP) {
@@ -174,6 +187,9 @@ static void setup(void)
 
 static void cleanup(void)
 {
+	remove("mntpoint/getxattr01testfile");
+	SAFE_UMOUNT(NULL,MNTPOINT);
+	SAFE_RMDIR(NULL,MNTPOINT);
 	tst_rmdir();
 }
 #else /* HAVE_SYS_XATTR_H */
