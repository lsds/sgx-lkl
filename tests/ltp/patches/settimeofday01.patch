One of the subtest cases designed to test the generation of EFAULT
by accessing invalid address values. Currently, sgx behavior is
to call enclave abort, if the address is not within the enclave address
range. Because of this test program is causing enclave abort
and exiting with non-zero exit code.

Github issue169 (https://github.com/lsds/sgx-lkl/issues/169)
is raised to fix this behavior. The subtest cases which test
EFAULT error behavior is commented/disabled until GitHub
issue169 is fixed.
diff --git a/testcases/kernel/syscalls/settimeofday/settimeofday01.c b/testcases/kernel/syscalls/settimeofday/settimeofday01.c
index 7388c3231..2cb5448a7 100644
--- a/testcases/kernel/syscalls/settimeofday/settimeofday01.c
+++ b/testcases/kernel/syscalls/settimeofday/settimeofday01.c
@@ -123,16 +123,16 @@ int main(int argc, char **argv)
 			tst_resm(TFAIL, "Test condition %d failed",
 				 condition_number++);
 		}
-
-		/* Invalid Args : Error Condition where tp = NULL */
-		TEST(settimeofday((struct timeval *)-1, NULL));
-		if (TEST_RETURN == -1) {
-			tst_resm(TPASS, "Test condition %d successful",
-				 condition_number++);
-		} else {
-			tst_resm(TFAIL, "Test condition %d failed",
-				 condition_number);
-		}
+//TODO:Enable after issue 169 is fixed
+//		/* Invalid Args : Error Condition where tp = NULL */
+//		TEST(settimeofday((struct timeval *)-1, NULL));
+//		if (TEST_RETURN == -1) {
+//			tst_resm(TPASS, "Test condition %d successful",
+//				 condition_number++);
+//		} else {
+//			tst_resm(TFAIL, "Test condition %d failed",
+//				 condition_number);
+//		}
 
 	}
 	cleanup();
