Test was failing as it used RAMFS. Fix is to use root file system.
diff --git a/testcases/kernel/syscalls/fcntl/fcntl24.c b/testcases/kernel/syscalls/fcntl/fcntl24.c
index 63c716ff6..b51d3ecb8 100644
--- a/testcases/kernel/syscalls/fcntl/fcntl24.c
+++ b/testcases/kernel/syscalls/fcntl/fcntl24.c
@@ -93,7 +93,11 @@
 #include <string.h>
 #include <signal.h>
 #include "test.h"
+#include "safe_macros.h"
 
+#define MNTPOINT  "mntpoint"
+#define FILENAME  "mntpoint/fcntl24testfile"
+#define DIR_MODE  (S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH)
 void setup();
 void cleanup();
 
@@ -102,6 +106,8 @@ int TST_TOTAL = 1;
 
 char fname[255];
 int fd;
+const char *device = "/dev/vda";
+static const char *fs_type = "ext4";
 
 int main(int ac, char **av)
 {
@@ -118,16 +124,6 @@ int main(int ac, char **av)
      ***************************************************************/
 	setup();
 
-	switch ((type = tst_fs_type(cleanup, "."))) {
-	case TST_NFS_MAGIC:
-	case TST_RAMFS_MAGIC:
-	case TST_TMPFS_MAGIC:
-		tst_brkm(TCONF, cleanup,
-			 "Cannot do fcntl on a file on %s filesystem",
-			 tst_fs_type_name(type));
-	break;
-	}
-
     /***************************************************************
      * check looping state if -c option given
      ***************************************************************/
@@ -185,13 +181,11 @@ void setup(void)
 {
 
 	tst_sig(NOFORK, DEF_HANDLER, cleanup);
+	rmdir(MNTPOINT);
+	SAFE_MKDIR(cleanup, MNTPOINT, DIR_MODE);
 
-	TEST_PAUSE;
 
-	tst_tmpdir();
-
-	sprintf(fname, "tfile_%d", getpid());
-	if ((fd = open(fname, O_RDWR | O_CREAT, 0777)) == -1) {
+	if ((fd = open(FILENAME, O_RDWR | O_CREAT, 0777)) == -1) {
 		tst_brkm(TBROK, cleanup,
 			 "open(%s, O_RDWR|O_CREAT,0777) Failed, errno=%d : %s",
 			 fname, errno, strerror(errno));
@@ -210,7 +204,7 @@ void cleanup(void)
 		tst_resm(TWARN, "close(%s) Failed, errno=%d : %s", fname, errno,
 			 strerror(errno));
 	}
-
-	tst_rmdir();
+	remove(FILENAME);
+	SAFE_RMDIR(NULL, MNTPOINT);
 
 }
