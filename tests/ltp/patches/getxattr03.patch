diff --git a/testcases/kernel/syscalls/getxattr/getxattr03.c b/testcases/kernel/syscalls/getxattr/getxattr03.c
index b6ea14287..d6a99fbee 100644
--- a/testcases/kernel/syscalls/getxattr/getxattr03.c
+++ b/testcases/kernel/syscalls/getxattr/getxattr03.c
@@ -27,6 +27,10 @@
  * the current size of the named extended attribute.
  */
 
+/* Currently xattr is not enabled while mounting root file system. Patch is
+ * to mount root file system with xattr enabled and then use it for the test.
+*/
+
 #include "config.h"
 #include <sys/types.h>
 #include <sys/stat.h>
@@ -50,8 +54,13 @@ char *TCID = "getxattr03";
 #define XATTR_TEST_KEY "user.testkey"
 #define XATTR_TEST_VALUE "test value"
 #define XATTR_TEST_VALUE_SIZE (sizeof(XATTR_TEST_VALUE) - 1)
-#define TESTFILE "getxattr03testfile"
+#define TESTFILE "mntpoint/getxattr03testfile"
+#define DIR_MODE        (S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH)
+#define FILE_MODE       (S_IRWXU | S_IRWXG | S_IRWXO | S_ISUID | S_ISGID)
+#define MNTPOINT        "mntpoint"
 
+static const char *device = "/dev/vda";
+static const char *fs_type = "ext4";
 static void setup(void);
 static void cleanup(void);
 
@@ -87,10 +96,13 @@ static void setup(void)
 	tst_require_root();
 
 	tst_tmpdir();
+	rmdir(MNTPOINT);
+	SAFE_MKDIR(cleanup, MNTPOINT, DIR_MODE);
+	SAFE_MOUNT(cleanup, device, MNTPOINT, fs_type, 0, "user_xattr");
 
 	/* Test for xattr support and set attr value */
 	fd = SAFE_CREAT(cleanup, TESTFILE, 0644);
-	close(fd);
+	SAFE_CLOSE(cleanup,fd);
 
 	if (setxattr(TESTFILE, XATTR_TEST_KEY, XATTR_TEST_VALUE,
 		     XATTR_TEST_VALUE_SIZE, XATTR_CREATE) == -1) {
@@ -107,6 +119,9 @@ static void setup(void)
 
 static void cleanup(void)
 {
+	remove(TESTFILE);
+	SAFE_UMOUNT(NULL,MNTPOINT);
+	SAFE_RMDIR(NULL,MNTPOINT);
 	tst_rmdir();
 }
 #else /* HAVE_SYS_XATTR_H */
