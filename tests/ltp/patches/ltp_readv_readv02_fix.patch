+ Test will be enabled once git isue 297 is fixed.
+ Issue 297: [Tests] lkl_access_ok() should return -1 on invalid access
+ https://github.com/lsds/sgx-lkl/issues/297
diff --git a/testcases/kernel/syscalls/readv/readv02.c b/testcases/kernel/syscalls/readv/readv02.c
index aa40e2c7d..d42e72517 100644
--- a/testcases/kernel/syscalls/readv/readv02.c
+++ b/testcases/kernel/syscalls/readv/readv02.c
@@ -127,23 +127,23 @@ int main(int ac, char **av)
                }

 //test2:
-               l_seek(fd[0], CHUNK * 6, 0);
-               if (readv(fd[0], (rd_iovec + 6), 3) < 0) {
-                       if (errno != EFAULT) {
-                               tst_resm(TFAIL, "expected errno = EFAULT, "
-                                        "got %d", errno);
-                       } else {
-                               tst_resm(TPASS, "got EFAULT");
-                       }
-                       if (memcmp((buf_list[0] + CHUNK * 6),
-                                  (buf_list[1] + CHUNK * 6), CHUNK * 3) != 0) {
-                               tst_resm(TFAIL, "Error: readv() partially "
-                                        "overlaid buf[2]");
-                       }
-               } else {
-                       tst_resm(TFAIL, "Error: readv returned a positive "
-                                "value");
-               }
+//             l_seek(fd[0], CHUNK * 6, 0); // TODO: Enable once git issue 297 is fixed
+//             if (readv(fd[0], (rd_iovec + 6), 3) < 0) {
+//                     if (errno != EFAULT) {
+//                             tst_resm(TFAIL, "expected errno = EFAULT, "
+//                                      "got %d", errno);
+//                     } else {
+//                             tst_resm(TPASS, "got EFAULT");
+//                     }
+//                     if (memcmp((buf_list[0] + CHUNK * 6),
+//                                (buf_list[1] + CHUNK * 6), CHUNK * 3) != 0) {
+//                             tst_resm(TFAIL, "Error: readv() partially "
+//                                      "overlaid buf[2]");
+//                     }
+//             } else {
+//                     tst_resm(TFAIL, "Error: readv returned a positive "
+//                              "value");
+//             }

 //test3:
                if (readv(fd[1], (rd_iovec + 9), 1) < 0) {
@@ -222,11 +222,7 @@ void setup(void)

        fd[1] = -1;             /* Invalid file descriptor */

-       bad_addr = mmap(0, 1, PROT_NONE,
-                       MAP_PRIVATE_EXCEPT_UCLINUX | MAP_ANONYMOUS, 0, 0);
-       if (bad_addr == MAP_FAILED) {
-               tst_brkm(TBROK, cleanup, "mmap failed");
-       }
+       bad_addr = 0;
        rd_iovec[6].iov_base = bad_addr;
 }

