+ Currently xattr is not enabled while mounting root file system. Patch is
+ to mount root file system with xattr enabled and then use it for the test.
diff --git a/testcases/kernel/syscalls/lgetxattr/lgetxattr01.c b/testcases/kernel/syscalls/lgetxattr/lgetxattr01.c
index b9669b214..78252719c 100644
--- a/testcases/kernel/syscalls/lgetxattr/lgetxattr01.c
+++ b/testcases/kernel/syscalls/lgetxattr/lgetxattr01.c
@@ -14,6 +14,7 @@
 *
 */
 
+#include <stdio.h>
 #include "config.h"
 #include <errno.h>
 #include <sys/types.h>
@@ -31,6 +32,13 @@
 #define SECURITY_KEY2   "security.ltptest2"
 #define VALUE1   "test1"
 #define VALUE2   "test2"
+#define MNTPOINT  "mntpoint"
+#define FILENAME  "mntpoint/lgetxattr01testfile"
+#define SYMLINK  "mntpoint/lgetxattr01symlink"
+#define DIR_MODE  (S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH)
+
+const char *device = "/dev/vda";
+static const char *fs_type = "ext4";
 
 static void set_xattr(char *path, char *key, void *value, size_t size)
 {
@@ -50,19 +58,29 @@ static void set_xattr(char *path, char *key, void *value, size_t size)
 
 static void setup(void)
 {
-	SAFE_TOUCH("testfile", 0644, NULL);
-	SAFE_SYMLINK("testfile", "symlink");
-
-	set_xattr("testfile", SECURITY_KEY1, VALUE1, strlen(VALUE1));
-	set_xattr("symlink", SECURITY_KEY2, VALUE2, strlen(VALUE2));
+	rmdir(MNTPOINT);
+	SAFE_MKDIR(MNTPOINT, DIR_MODE);
+	SAFE_MOUNT(device, MNTPOINT, fs_type, 0, "user_xattr");
+	SAFE_TOUCH(FILENAME, 0644, NULL);
+	SAFE_SYMLINK(FILENAME, SYMLINK);
+
+	set_xattr(FILENAME, SECURITY_KEY1, VALUE1, strlen(VALUE1));
+	set_xattr(SYMLINK, SECURITY_KEY2, VALUE2, strlen(VALUE2));
 }
 
+static void cleanup(void)
+{
+	remove(SYMLINK);
+	remove(FILENAME);
+	SAFE_UMOUNT(MNTPOINT);
+	SAFE_RMDIR(MNTPOINT);
+}
 static void verify_lgetxattr(void)
 {
 	int size = 64;
 	char buf[size];
 
-	TEST(lgetxattr("symlink", SECURITY_KEY2, buf, size));
+	TEST(lgetxattr(SYMLINK, SECURITY_KEY2, buf, size));
 	if (TST_RET == -1) {
 		tst_res(TFAIL | TTERRNO, "lgetxattr() failed");
 		goto next;
@@ -79,7 +97,7 @@ static void verify_lgetxattr(void)
 		tst_res(TFAIL, "lgetxattr() got unexpected value");
 
 next:
-	TEST(lgetxattr("symlink", SECURITY_KEY1, buf, size));
+	TEST(lgetxattr(SYMLINK, SECURITY_KEY1, buf, size));
 
 	if (TST_RET != -1) {
 		tst_res(TFAIL, "lgetxattr() succeeded unexpectedly");
@@ -95,9 +113,9 @@ next:
 }
 
 static struct tst_test test = {
-	.needs_tmpdir = 1,
 	.needs_root = 1,
 	.test_all = verify_lgetxattr,
+	.cleanup = cleanup,
 	.setup = setup
 };
 
