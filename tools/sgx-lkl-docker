#!/usr/bin/env bash

set -e

# Set the SGXLKL_ROOT path
cmd_root="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
sgxlkl_root="${cmd_root}/.."

sub_cmd=
cc_name=
cc_enclave_cfg=
cc_host_cfg=

# Support windows msys environments
if  [ "${OSTYPE}" == "msys" ]; then
    # See https://github.com/git-for-windows/msys2-runtime/pull/11 for context
    export msys_no_pathconv=1
    echo "Detected msys: Disabled msys mangling."
fi

function usage() {
    echo "Usage:"
    echo "$(basename "$0") <command>"
    echo
    echo "where <command> is one of the following:"
    echo "  build                                              Re-package disk images and configuration as Docker image"
    echo "    --name=<name>                                    Name of Docker image to be created."
    echo "    --host-cfg=<path>                                Path to host configuration file."
    echo "    --enclave-cfg=<path>                             Path to enclave configuration file."
    echo
    echo " [-?]                                                Display this help message."
    exit 1
}

function build() {
    echo "SGX-LKL root: $sgxlkl_root"

    echo "Creating confidential container '${cc_name}'"

    context_dir=$(mktemp -d sgxlkl_docker_context_XXXX)
    echo "Using temporary directory ${context_dir}"

    cat >>"${context_dir}/Dockerfile" << EOF
FROM ubuntu:18.04
RUN apt-get update && apt-get install -y ca-certificates

# ca-certificates.crt is read by libcurl which is used by the Azure DCAP Client.

RUN mkdir /prep && \
    cd /prep && \
    mkdir etc && \
    mkdir -p home/sgxlkl && \
    ls -al home/sgxlkl && \
    mkdir tmp && \
    chmod 777 tmp && \
    mkdir -p etc/ssl/certs && \
    cp /etc/ssl/certs/ca-certificates.crt etc/ssl/certs && \
    ls -al etc/ssl/certs

COPY . /prep/home/sgxlkl

# Allows container to be run with arbitrary user while supporting writable disk images.
RUN chmod -R 777 /prep/home/sgxlkl

FROM scratch

ENV HOME=/home/sgxlkl
ENV TMPDIR=/tmp
# See https://github.com/microsoft/Azure-DCAP-Client.
ENV AZDCAP_CACHE=\${TMPDIR}

COPY --from=0 /prep /

USER 1000:1000
WORKDIR \${HOME}

ENTRYPOINT ["/opt/sgx-lkl/lib/external/ld-linux-x86-64", "/opt/sgx-lkl/bin/sgx-lkl-run-oe",\
    "--enclave-image=/opt/sgx-lkl/lib/libsgxlkl.so.signed",\
    "--isolated-image=/opt/sgx-lkl/lib/libsgxlkl-user.so",\
    "--host-config=host-cfg.json",\
    "--enclave-config=enclave-cfg.json"]
CMD ["--hw-release"]
EOF

    cp "${cc_enclave_cfg}" "${context_dir}/enclave-cfg.json"

    disk_paths=$("${cmd_root}/sgx-lkl-cfg" dockerize \
        --host-cfg=${cc_host_cfg} \
        --host-cfg-docker="${context_dir}/host-cfg.json" \
        --print-disk-paths)

    while IFS= read -r line; do
        IFS=':' read -ra entry <<< "$line"
        img_path=${entry[0]}
        img_docker_path=${entry[1]}
        cp "$img_path" "$context_dir/$img_docker_path"
    done <<< "${disk_paths}"

    docker build -t $cc_name "$context_dir"

    echo "Done. Tagged '$cc_name'."

    rm -rf "$context_dir"
}

function main() {

    [ $# -eq 0 ] && usage

    while :; do
        case $1 in
            -h|-\?|--help)
                usage && exit
                ;;
            build)
                sub_cmd=$1
                ;;
            --name=?*)
                cc_name=${1#*=}
                ;;
            --enclave-cfg=?*)
                cc_enclave_cfg=${1#*=}
                ;;
            --host-cfg=?*)
                cc_host_cfg=${1#*=}
                ;;
            --) # End of options
                shift
                break
                ;;
            -?*)
                echo "Unknown option: $1" && usage && exit 1
                ;;
            *) # Default: no more options, break
                break
        esac
        shift
    done

    case "$sub_cmd" in
        build)
            build "$@"
            ;;
        *)
            echo "Missing/unknown command" && usage && exit 1
            ;;
    esac
}

main "$@"
